
/*
Input Format

The first line consists of an integer, , the number of rocks. 
Each of the next  lines contains a rock's composition. Each composition consists of lower-case letters of English alphabet.

Constraints 
 
Each composition consists of only lower-case Latin letters ('a'-'z'). 
 length of each composition 

Output Format

Print the number of gem-elements that are common in these rocks. If there are none, print 0.

Sample Input

3
abcdde
baccd
eeabg
Sample Output

2
Explanation

Only "a" and "b" are the two kinds of gem-elements, since these are the only characters that occur in every rock's composition.


*/
#include <stdio.h>
#include <stdlib.h>
#include<string.h>

void delet(char (*p)[100] ,int j)
{
     int x=j;
     while(p[0][x] !='\0')
{
     p[0][x]=p[0][x+1];
     ++x;
}

}

int main()
{
int n, i ,j ;

     scanf("%d",&n);
    char (*p)[100]=(char*)malloc(n*100*sizeof(char));


for(i=0; i<n; ++i)
{
     scanf("%s",p[i]  );
}
//p[0]

for(i=0;i<strlen(p[0]) ;++i)
{
     for(j=i+1 ; j<strlen(p[0]);++j )
     {
          if(p[0][j]==p[0][i])
          {
               delet(p[0],j);
          }
     }
}



int output=0;
for(i=0;i<strlen(p[0]);++i)
{
     int flag[n],f;
     int flagx=0;
     for(f=0;f<n;++f)  //initialization
     {
          flag[f]=0;
     }
     flag[0]=1;
     int k,l;
     for(k=1;k<n;++k) //check
     {
          for(l=0;l<strlen(p[k]);++l)
          {
               if(p[k][l]==p[0][i])
                    flag[k]=1;
          }
     }
      for(f=0;f<n;++f)  //initialization
     {
        if(flag[f]==1)
          ++flagx;
     }
     if (flagx==n)
          output++;
}

printf("%d",output);


  return 0;
}

